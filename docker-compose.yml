---
version: '3'
services:
  discovery-server:
    image: ${DISCOVERY_IMAGE}
    container_name: discovery-server
    ports:
      - "${DISCOVERY_PORT}:${DISCOVERY_PORT}"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_USERNAME=${DISCOVERY_USER}
      - EUREKA_PASSWORD=${DISCOVERY_PASSWORD}
      - TZ=Asia/Ho_Chi_Minh
    restart: always

  api-gateway:
    image: ${GATEWAY_IMAGE}
    container_name: api-gateway
    ports:
      - "${API_GATEWAY_PORT}:8080"
    expose:
      - ${API_GATEWAY_PORT}
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY=TRACE
      - TZ=Asia/Ho_Chi_Minh
    depends_on:
      - discovery-server
    restart: always

  postgres-sso:
    container_name: postgres-sso
    image: postgres:12-alpine
    ports:
      - "${SSO_DB_PORT}:${SSO_DB_PORT}"
    expose:
      - ${SSO_DB_PORT}
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - PGDATA=${DB_DATA}
    command: -p ${SSO_DB_PORT}
    volumes:
      - ./postgres-sso:${DB_DATA}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: always

  sso-service:
    container_name: sso-service
    image: ${SSO_IMAGE}
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://${DISCOVERY_USER}:${DISCOVERY_PASSWORD}@discovery-server:${DISCOVERY_PORT}/eureka
      - SPRING_DATASOURCE_USERNAME=${DB_USER}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD}
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-sso:${SSO_DB_PORT}/postgres
      - SPRING_KAFKA_BOOTSTRAP-SERVERS=broker:${KAFKA_PORT}
      - TZ=Asia/Ho_Chi_Minh
    depends_on:
      - postgres-sso
      - discovery-server
      - api-gateway
      - broker
    restart: always

  postgres-notification:
    container_name: postgres-notification
    image: postgres:12-alpine
    ports:
      - "${NOTIFICATION_DB_PORT}:${NOTIFICATION_DB_PORT}"
    expose:
      - ${NOTIFICATION_DB_PORT}
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - PGDATA=${DB_DATA}
    command: -p ${NOTIFICATION_DB_PORT}
    volumes:
      - ./postgres-news:${DB_DATA}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: always

  notification-service:
    container_name: notification-service
    image: ${NOTIFICATION_IMAGE}
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://${DISCOVERY_USER}:${DISCOVERY_PASSWORD}@discovery-server:${DISCOVERY_PORT}/eureka
      - SPRING_DATASOURCE_USERNAME=${DB_USER}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD}
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-news:${NOTIFICATION_DB_PORT}/postgres
      - SPRING_KAFKA_BOOTSTRAP-SERVERS=broker:${KAFKA_PORT}
      - TZ=Asia/Ho_Chi_Minh
    depends_on:
      - postgres-notification
      - discovery-server
      - api-gateway
      - broker
    restart: always

  postgres-media:
    container_name: postgres-media
    image: postgres:12-alpine
    ports:
      - "${MEDIA_DB_PORT}:${MEDIA_DB_PORT}"
    expose:
      - ${MEDIA_DB_PORT}
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - PGDATA=${DB_DATA}
    command: -p ${MEDIA_DB_PORT}
    volumes:
      - ./postgres-news:${DB_DATA}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: always

  media-service:
    container_name: media-service
    image: ${MEDIA_IMAGE}
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://${DISCOVERY_USER}:${DISCOVERY_PASSWORD}@discovery-server:${DISCOVERY_PORT}/eureka
      - SPRING_DATASOURCE_USERNAME=${DB_USER}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD}
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-news:${MEDIA_DB_PORT}/postgres
      - SPRING_KAFKA_BOOTSTRAP-SERVERS=broker:${KAFKA_PORT}
      - TZ=Asia/Ho_Chi_Minh
    depends_on:
      - postgres-media
      - discovery-server
      - api-gateway
      - broker
    restart: always

  postgres-interaction:
    container_name: postgres-interaction
    image: postgres:12-alpine
    ports:
      - "${INTERACTION_DB_PORT}:${INTERACTION_DB_PORT}"
    expose:
      - ${INTERACTION_DB_PORT}
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - PGDATA=${DB_DATA}
    command: -p ${INTERACTION_DB_PORT}
    volumes:
      - ./postgres-news:${DB_DATA}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: always

  interaction-service:
    container_name: interaction-service
    image: ${INTERACTION_IMAGE}
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://${DISCOVERY_USER}:${DISCOVERY_PASSWORD}@discovery-server:${DISCOVERY_PORT}/eureka
      - SPRING_DATASOURCE_USERNAME=${DB_USER}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD}
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-news:${INTERACTION_DB_PORT}/postgres
      - SPRING_KAFKA_BOOTSTRAP-SERVERS=broker:${KAFKA_PORT}
      - TZ=Asia/Ho_Chi_Minh
    depends_on:
      - postgres-interaction
      - discovery-server
      - api-gateway
      - broker
    restart: always

  postgres-friend:
    container_name: postgres-friend
    image: postgres:12-alpine
    ports:
      - "${FRIEND_DB_PORT}:${FRIEND_DB_PORT}"
    expose:
      - ${FRIEND_DB_PORT}
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - PGDATA=${DB_DATA}
    command: -p ${FRIEND_DB_PORT}
    volumes:
      - ./postgres-news:${DB_DATA}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: always

  friend-service:
    container_name: friend-service
    image: ${FRIEND_IMAGE}
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://${DISCOVERY_USER}:${DISCOVERY_PASSWORD}@discovery-server:${DISCOVERY_PORT}/eureka
      - SPRING_DATASOURCE_USERNAME=${DB_USER}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD}
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-news:${FRIEND_DB_PORT}/postgres
      - SPRING_KAFKA_BOOTSTRAP-SERVERS=broker:${KAFKA_PORT}
      - TZ=Asia/Ho_Chi_Minh
    depends_on:
      - postgres-friend
      - discovery-server
      - api-gateway
      - broker
    restart: always

  postgres-feed:
    container_name: postgres-feed
    image: postgres:12-alpine
    ports:
      - "${FEED_DB_PORT}:${FEED_DB_PORT}"
    expose:
      - ${FEED_DB_PORT}
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - PGDATA=${DB_DATA}
    command: -p ${FEED_DB_PORT}
    volumes:
      - ./postgres-news:${DB_DATA}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: always

  feed-service:
    container_name: review-feed
    image: ${FEED_IMAGE}
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://${DISCOVERY_USER}:${DISCOVERY_PASSWORD}@discovery-server:${DISCOVERY_PORT}/eureka
      - SPRING_DATASOURCE_USERNAME=${DB_USER}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD}
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-news:${FEED_DB_PORT}/postgres
      - SPRING_KAFKA_BOOTSTRAP-SERVERS=broker:${KAFKA_PORT}
      - TZ=Asia/Ho_Chi_Minh
    depends_on:
      - postgres-feed
      - discovery-server
      - api-gateway
      - broker
    restart: always

  postgres-chat:
    container_name: postgres-chat
    image: postgres:12-alpine
    ports:
      - "${CHAT_DB_PORT}:${CHAT_DB_PORT}"
    expose:
      - ${CHAT_DB_PORT}
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - PGDATA=${DB_DATA}
    command: -p ${CHAT_DB_PORT}
    volumes:
      - ./postgres-news:${DB_DATA}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: always

  chat-service:
    container_name: chat-service
    image: ${CHAT_IMAGE}
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://${DISCOVERY_USER}:${DISCOVERY_PASSWORD}@discovery-server:${DISCOVERY_PORT}/eureka
      - SPRING_DATASOURCE_USERNAME=${DB_USER}
      - SPRING_DATASOURCE_PASSWORD=${DB_PASSWORD}
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-news:${CHAT_DB_PORT}/postgres
      - SPRING_KAFKA_BOOTSTRAP-SERVERS=broker:${KAFKA_PORT}
      - TZ=Asia/Ho_Chi_Minh
    depends_on:
      - postgres-chat
      - discovery-server
      - api-gateway
      - broker
    restart: always

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin-dormy
    ports:
      - "9411:9411"

  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    restart: always
    user: "0:0"
    volumes:
      - ./zookeeper-data:/var/lib/zookeeper/data
      - ./.zookeeper-logs:/var/lib/zookeeper/log

  broker:
    image: confluentinc/cp-kafka:7.3.0
    container_name: broker
    ports:
      - 9092:9092
    expose:
      - 9092
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_LISTENER: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    restart: always
    user: "0:0"
    volumes:
      - ./.kafka-logs:/logs
      - ./kafka-data:/var/lib/kafka/data

  redis:
    container_name: redis
    image: redis:latest
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    volumes:
      - ./redis-data:/data